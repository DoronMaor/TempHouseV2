#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Apr 29, 2022 12:24:50 PM +0300  platform: Windows NT
import tkinter as tk
from tkinter.constants import *

import clientf.tk_frames.apartments as apartments


def main(frame, logged_user, func_dic, houses,area, pics, win, *args):
    '''Main entry point for the application.'''
    global root, func_dict
    func_dict = func_dic
    if win:
        root = win
    else:
        root = tk.Tk()
        root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = apartments.Toplevel1(frame, logged_user, func_dic, houses, string_to_tuple(area), _top1)
    root.mainloop()


def fill_listbox(listbox, items):
    '''Fills the listbox with the items.'''
    listbox.delete(0, END)
    for item in items:
        listbox.insert(END, item.name)


def gen_details(house, *args):
    """
    Generates a details for the house.
    details are:
    - number of rooms
    - number of beds
    - price per day (in ILS)
    - rarting (in stars)
    - owner's id
    - Area
    - apartment's id
    """
    details = ""
    details += "Number of rooms: " + str(house.number_of_rooms) + "\n"
    details += "Number of beds: " + str(house.number_of_beds) + "\n"
    details += "Price per day: " + str(house.price) + "\n"
    details += "Rating: %s ⭐" % str(house.calculate_star_rating()) + "\n"
    details += "Owner's id: " + str(house.owner) + "\n"
    details += "Area: " + str(house.area) + "\n"
    details += "Apartment's id: " + str(house.id) + "\n"
    return details


def gen_description(house, txt=None, *args):
    """
    Generates a description for the house.
    description is:
    - description
    - rules [list to bullet points]
    """
    if txt:
        txt.delete(0, END)
        txt.insert(END, "Description")
        txt.insert(END, house.description)
        txt.insert(END, "\n")
        txt.insert(END, "Rules:")
        for rule in house.rules:
            txt.insert(END, "\n")
            txt.insert(END, "- " + rule)
    else:
        description = ""
        description += house.description + '\n'
        description += "Rules: " + '\n'
        for rule in house.rules:
            description += " - " + rule + '\n'
        return description


def on_list_select(houses, house_name, name_lbl, rooms_beds_price_lbl,
                      description_lbl, img_canvas, reviews_but, rent_but, des_or_rev_txt, win, *args):
    '''Fills the labels with the selected house data.'''

    house = find_house_by_name(house_name, houses)
    if house:
        name_lbl.config(text=house.name)
        rooms_beds_price_lbl.config(text=gen_details(house))
        description_lbl.config(text=gen_description(house))

        des_or_rev_txt.delete(0, END)
        des_or_rev_txt.config(state=NORMAL)
        gen_description(house, des_or_rev_txt)
        des_or_rev_txt.config(state=DISABLED)

        reviews_but.config(state=NORMAL)
        rent_but.config(state=NORMAL)
        can = img_canvas[0]
        im = img_canvas[1]

        pic = func_dict["get_pics"](house.id)
        error = pic[1]
        pic = pic[0]
        if pic is not None:
            can.delete("all")
            try:
                im = tk.PhotoImage(master=can, file=pic)
            except:
                im = tk.PhotoImage(master=can, file=error)

            can.create_image(0, 0, image=im, anchor=NW)
            can.image = im
            try:
                can.bind("<Button-1>", lambda x: show_image(im, win))
            except:
                pass

        else:
            can.delete("all")
            can.create_text(0, 0, text="No picture available", anchor=NW)

    else:
        name_lbl.config(text="")
        rooms_beds_price_lbl.config(text="")
        description_lbl.config(text="")
        img_canvas.config(image=None)
        reviews_but.config(state=DISABLED)
        rent_but.config(state=DISABLED)


def show_image(im, win):
    """
    Shows the image in a new window.
    """
    win = tk.Toplevel(win)
    win.title("Image")
    win.geometry("%dx%d" % (im.width(), im.height()))
    win.resizable(0, 0)
    tk.Label(win, image=im).pack()
    win.mainloop()


def on_reviews_select(house, reviews_txtbox, houses, *args):
    '''Fills the list with the reviews of the selected house.'''
    house = find_house_by_name(house, houses)

    reviews_txtbox.config(state=NORMAL)
    if "Description" not in reviews_txtbox.get(0, END):
        reviews_txtbox.delete(0, END)
        gen_description(house, reviews_txtbox)
    else:
        reviews = house.reviews
        reviews_txtbox.delete(0, END)
        for review in reviews:
            rev = "Review by " + review[0] + " [%s ⭐] : " % str(review[1]) + review[2] + "\n"
            reviews_txtbox.insert(END, rev)
            reviews_txtbox.insert(END, "\n")
    reviews_txtbox.config(state=DISABLED)


def sort_by_price(lst_box, houses):
    """
    Sorts the houses by price.
    """
    global reev
    houses.sort(key=lambda x: x.price, reverse=reev)
    reev = not reev

    fill_listbox(lst_box, houses)


def sort_by_location(lst_box, houses, search_location):
    """
    Sorts the houses by distance.
    """
    global reev2
    houses.sort(key=lambda x: x.pitaguras_theo(search_location, x.area), reverse=reev2)
    reev2 = not reev2

    fill_listbox(lst_box, houses)


def find_house_by_name(name, houses):
    """
    Finds a house by its name.
    """

    for house in houses:
        if house.name == name:
            return house


def string_to_tuple(string):
    """
    Converts a string "(x,y)" to a tuple (x,y).
    """
    string = string[1:-1]
    x, y = string.split(",")
    return (int(x), int(y))



reev = False
reev2 = False
func_dict = {}
last_time_asked_for_pic = None