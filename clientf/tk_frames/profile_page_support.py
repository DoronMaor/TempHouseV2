#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Apr 30, 2022 09:24:29 PM +0300  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import datetime
from tkHelper import *
import clientf.tk_frames.profile_page as profile_page

def main(frame, logged_user, func_ict, mes, *args):
    '''Main entry point for the application.'''
    global root, func_dict, today
    func_dict = func_ict
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    if mes:
        pop_up(_top1, mes)
    today = func_dict['get_date']()
    _w1 = profile_page.profile_page(frame, logged_user, func_dict, _top1)
    root.mainloop()


def fill_listbox_user(listbox, user, active_lstbox, past_lstbox, frame=None, top=None):
    '''Fills the listbox with the items.'''
    if user.is_admin:
        ad_status = 'Admin'
    else:
        ad_status = 'User'
    listbox.delete(0, END)
    listbox.insert(END, "Username: " + user.name)
    listbox.insert(END, "Email: " + user.email)
    listbox.insert(END, "Age: " + str(user.age))
    listbox.insert(END, "ID number: " + str(user.id))
    listbox.insert(END, "Admin status: " + ad_status)
    # if double click on the admin status, open admin page
    listbox.bind('<Double-Button-1>', lambda event: func_dict['admin_window'](frame, top, listbox.get(ACTIVE)))

    listbox.insert(END, "")

    try:
        for r in user.get_reservations():
            if is_active(r):
                active_lstbox.insert(END, get_res_info(func_dict, r)  + " [Not rated]")
            else:
                if user.already_rated(r[0], r[1]):
                    past_lstbox.insert(END, get_res_info(func_dict, r) + " [Rated]")
                    # make it unselectable
                    past_lstbox.itemconfig(END, foreground='gray')
                else:
                    past_lstbox.insert(END, get_res_info(func_dict, r))
    except:
        pass


def is_active(res):
    global today
    if res != "" and res is not None and len(res) >= 2:
        d1 = datetime.datetime.strptime(res[1], "%Y-%m-%d").date()
        d2 = datetime.datetime.strptime(res[2], "%Y-%m-%d").date()
        if d1 <= today <= d2 or d1 > today:
            return True
    return False


def get_res_info(func_dict, res):
    st = ""
    if res[0] is None:
        return "Apartment not found"
    ap_name = func_dict['get_apartment_by_id'](res[0]).name
    st += "Apartment name and ID: " + ap_name + " [%d]" % res[0] + " "
    st += "Start date: " + str(res[1]) + " "
    st += "End date: " + str(res[2]) + "|"
    return st




today = datetime.datetime.now().date()
func_dict = {}




